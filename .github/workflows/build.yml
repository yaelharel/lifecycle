name: build

on:
  push:
    branches:
      - main
      - 'release/**'
  pull_request:
    branches:
      - main
      - 'release/**'

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up go
        uses: actions/setup-go@v2-beta
        with:
          go-version: '1.14'
      - name: Set up go env
        run: |
          echo "::set-env name=GOPATH::$(go env GOPATH)"
          echo "::add-path::$(go env GOPATH)/bin"
        shell: bash
      - name: Install jq
        run: |
          mkdir -p deps/bin
          curl -s -L -o deps/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
          chmod +x deps/bin/jq
          echo "::add-path::${PWD}/deps/bin"
      - name: Test
        run: make test
      - name: Build
        run: |
          make build-linux
          make package-linux
      - uses: actions/upload-artifact@v2
        with:
          name: lifecycle-linux-x86-64
          path: out/lifecycle-v*+linux.x86-64.tgz
  test-and-build-windows:
    runs-on: windows-latest
    steps:
      - name: Set git to use LF and symlinks
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global core.symlinks true
      - uses: actions/checkout@v2
      - name: Set up go
        uses: actions/setup-go@v2-beta
        with:
          go-version: '1.14'
      - name: Install jq
        run: |
          choco install jq
      - name: Test
        run: |
          make test
        shell: cmd
      - name: Build
        run: |
          make build-windows
          make package-windows
        shell: cmd
      - uses: actions/upload-artifact@v2
        with:
          name: lifecycle-windows-x86-64
          path: out/lifecycle-v*+windows.x86-64.tgz
  release:
    if: ${{ startsWith(github.ref, 'refs/heads/release/') }}
    needs:
      - test-and-build
      - test-and-build-windows
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Derive lifecycle version from branch name
        run: |
          [[ $GITHUB_REF =~ ^refs\/heads\/release/(.*)$ ]] && version=${BASH_REMATCH[1]}
          if [[ -z "${version}" ]]; then
            echo "lifecycle version not detected."
            exit 1
          fi
          echo "::set-env name=LIFECYCLE_VERSION::$version"
        shell: bash
      - name: Download artifacts - linux
        uses: actions/download-artifact@v1
        with:
          name: lifecycle-linux-x86-64
      - name: Download artifacts - windows
        uses: actions/download-artifact@v1
        with:
          name: lifecycle-windows-x86-64
      - uses: actions/github-script@v1
        id: changelog
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            const path = require('path');
            const scriptPath = path.resolve('.github/workflows/build/changelog.js');
            require(scriptPath)({core, github, context});
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.LIFECYCLE_VERSION }}
          release_name: lifecycle v${{ env.LIFECYCLE_VERSION }}
          draft: true
          prerelease: false
          # TODO: decide what to write in the "Welcome" line for major, minor and patch versions
          body: |
            # lifecycle v${{ env.LIFECYCLE_VERSION }}

            Welcome to `v${{ env.LIFECYCLE_VERSION }}`, a **beta** release of the Cloud Native Buildpack Lifecycle.

            ##  Prerequisites

            The lifecycle runs as a normal user in a series of unprivileged containers. To export images and cache image layers, it requires access to a Docker daemon **or** Docker registry.

            ## Install

            Extract the `.tgz` file and copy the lifecycle binaries into a [build stack base image](https://github.com/buildpack/spec/blob/master/platform.md#stacks). The build image can then be orchestrated by a platform implementation such as the [pack CLI](https://github.com/buildpack/pack) or [tekton](https://github.com/tektoncd/catalog/blob/master/buildpacks/README.md).

            ## Changelog

            ${{ steps.changelog.outputs.contents }}
      - name: Upload Release Asset - linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./lifecycle-linux-x86-64.tgz
          asset_name: lifecycle-v${{ env.LIFECYCLE_VERSION }}+linux.x86-64.tgz
          asset_content_type: application/gzip
      - name: Upload Release Asset - windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./lifecycle-windows-x86-64.tgz
          asset_name: lifecycle-v${{ env.LIFECYCLE_VERSION }}+windows.x86-64.tgz
          asset_content_type: application/gzip
